<?php
/*
 * Clamshell - A standalone OpenID Identity Provider
 *
 * Original phpMyID code by CJ Niemira (c) 2006-2007
 * Modified by Stephen Bounds (C) 2007.
 *
 * This code is licensed under the GNU General Public License
 * http://www.gnu.org/licenses/gpl.html
 *
 */

/**
 *  Code to set up and destroy user sessions
 */
function user_session() {
  session_name(t('auth_realm'));
  @session_start();

  if (isset($_SESSION['auth_username']) &&
      $_SESSION['auth_username'] == t('auth_username')) {
    set_t('authorized', TRUE);
  } else {
    set_t('authorized', FALSE);
  }

  debug('Started user session: ' . session_id() . ' Auth? ' . t('authorized'));
}

function user_session_destroy() {
  // Unset all of the session variables.
  $_SESSION = array();

  // Remove the session's cookie
  if (isset($_COOKIE[session_name()])) {
      setcookie(session_name(), '', time()-42000, '/');
  }

  // Finally, destroy the session.
  session_destroy();
}

/**
 *  Association key creation functions
 */
function new_assoc($expiration = null) {
  if (is_array($_SESSION)) {
    $sid = session_id();
    $dat = session_encode();
    session_write_close();
  }

  session_start();
  session_regenerate_id('false');

  $id = session_id();
  $shared_secret = new_secret();
  debug('Started new assoc session: ' . $id);

  $_SESSION = array();
  $_SESSION['expiration'] = $expiration;
  $_SESSION['shared_secret'] = base64_encode($shared_secret);

  session_write_close();

  if (isset($sid)) {
    session_id($sid);
    session_start();
    $_SESSION = array();
    session_decode($dat);
  }

  return array($id, $shared_secret);
}

function destroy_assoc_handle($id) {
  debug("Destroying session: $id");

  $sid = session_id();
  session_write_close();

  session_id($id);
  session_start();
  session_destroy();

  session_id($sid);
  session_start();
}

function new_secret() {
  $r = '';
  for($i=0; $i<20; $i++)
    $r .= chr(mt_rand(0, 255));

  debug("Generated new secret. Size: " . strlen($r));
  return $r;
}


function random($max) {
  if (strlen($max) < 4)
    return mt_rand(1, $max - 1);

  $r = '';
  for($i=1; $i<strlen($max) - 1; $i++)
    $r .= mt_rand(0,9);
  $r .= mt_rand(1,9);

  return $r;
}


function secret($handle) {
  if (! preg_match('/^\w+$/', $handle))
    return array(false, 0);

  if (is_array($_SESSION)) {
    $sid = session_id();
    $dat = session_encode();
    session_write_close();
  }

  session_id($handle);
  session_start();
  debug('Started session to acquire key: ' . session_id());

  $secret = session_is_registered('shared_secret')
    ? base64_decode($_SESSION['shared_secret'])
    : false;

  $expiration = session_is_registered('expiration')
    ? $_SESSION['expiration']
    : null;

  session_write_close();

  if (isset($sid)) {
    session_id($sid);
    session_start();
    $_SESSION = array();
    session_decode($dat);
  }

  debug("Session expires in: '$expiration', key length: " . strlen($secret));
  return array($secret, $expiration);
}
